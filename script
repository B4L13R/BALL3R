local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")
local LocalPlayer = Players.LocalPlayer
local activeTrolls = {}
local trollFunctions = {}

-- Core Troll Functions (same as before, abbreviated here for space)
-- (Use your original troll functions from the previous script)

-- Example for brevity
trollFunctions.bringPlayer = function()
    local targetPlayer = getTargetPlayer()
    if not targetPlayer then return "No target selected" end

    local targetRoot = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    local localRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

    if not targetRoot or not localRoot then return "Missing root part" end

    localRoot.CFrame = targetRoot.CFrame + Vector3.new(2, 0, 0)
    return "Player brought to you"
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- UI Setup
local Ball3rMM2 = Instance.new("ScreenGui")
Ball3rMM2.Name = "Ball3rMM2"
Ball3rMM2.Parent = game.CoreGui
Ball3rMM2.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 400, 0, 600)
MainFrame.Position = UDim2.new(0.8, 0, 0.5, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = Ball3rMM2

-- Player selector
local PlayerLabel = Instance.new("TextLabel")
PlayerLabel.Name = "PlayerLabel"
PlayerLabel.Size = UDim2.new(1, 0, 0, 30)
PlayerLabel.Position = UDim2.new(0, 0, 0.1, 0)
PlayerLabel.BackgroundTransparency = 1
PlayerLabel.Text = "Select Target Player:"
PlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerLabel.TextSize = 16
PlayerLabel.Font = Enum.Font.Gotham
PlayerLabel.Parent = MainFrame

local PlayerDropdown = Instance.new("Frame")
PlayerDropdown.Name = "PlayerDropdown"
PlayerDropdown.Size = UDim2.new(0.9, 0, 0, 30)
PlayerDropdown.Position = UDim2.new(0.05, 0, 0.16, 0)
PlayerDropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
PlayerDropdown.BorderSizePixel = 0
PlayerDropdown.Parent = MainFrame

local SelectedPlayer = Instance.new("TextLabel")
SelectedPlayer.Name = "SelectedPlayer"
SelectedPlayer.Size = UDim2.new(1, -30, 1, 0)
SelectedPlayer.BackgroundTransparency = 1
SelectedPlayer.Text = "No Player Selected"
SelectedPlayer.TextColor3 = Color3.fromRGB(255, 255, 255)
SelectedPlayer.TextSize = 14
SelectedPlayer.Font = Enum.Font.Gotham
SelectedPlayer.Parent = PlayerDropdown

local DropdownButton = Instance.new("TextButton")
DropdownButton.Name = "DropdownButton"
DropdownButton.Size = UDim2.new(0, 30, 1, 0)
DropdownButton.Position = UDim2.new(1, -30, 0, 0)
DropdownButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
DropdownButton.BorderSizePixel = 0
DropdownButton.Text = "▼"
DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DropdownButton.TextSize = 14
DropdownButton.Font = Enum.Font.Gotham
DropdownButton.Parent = PlayerDropdown

local PlayerList = Instance.new("ScrollingFrame")
PlayerList.Name = "PlayerList"
PlayerList.Size = UDim2.new(1, 0, 0, 150)
PlayerList.Position = UDim2.new(0, 0, 1, 0)
PlayerList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
PlayerList.BorderSizePixel = 0
PlayerList.ScrollBarThickness = 4
PlayerList.Visible = false
PlayerList.ZIndex = 50
SelectedPlayer.ZIndex =51
DropdownButton.ZIndex = 51
PlayerDropdown.ZIndex = 49
PlayerList.Parent = PlayerDropdown

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = PlayerList
UIListLayout.SortOrder = Enum.SortOrder.Name

-- Variables
local targetPlayer = nil
local isDropdownOpen = false

-- Dropdown functions
local function updatePlayerList()
    -- Clear existing
    for _, child in pairs(PlayerList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Add all players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerButton = Instance.new("TextButton")
            playerButton.Name = player.Name
            playerButton.Size = UDim2.new(1, -4, 0, 30)
            playerButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            playerButton.BorderSizePixel = 0
            playerButton.Text = player.Name
            playerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            playerButton.TextSize = 14
            playerButton.Font = Enum.Font.Gotham
            playerButton.Parent = PlayerList
            playerButton.ZIndex = 52
            playerButton.MouseButton1Click:Connect(function()
                targetPlayer = player
                SelectedPlayer.Text = player.Name
                PlayerList.Visible = false
                isDropdownOpen = false
            end)
        end
    end
    
    PlayerList.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end

DropdownButton.MouseButton1Click:Connect(function()
    isDropdownOpen = not isDropdownOpen
    PlayerList.Visible = isDropdownOpen
    
    if isDropdownOpen then
        updatePlayerList()
        DropdownButton.Text = "▲"
    else
        DropdownButton.Text = "▼"
    end
end)

-- Utility Functions
local function getPlayerCharacter(player)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return player.Character
    end
    return nil
end

-- Troll Functions
trollFunctions.bringPlayer = function()
    if not targetPlayer then
        return "Select a player first!"
    end
    
    local character = getPlayerCharacter(targetPlayer)
    local localCharacter = getPlayerCharacter(LocalPlayer)
    
    if character and localCharacter then
        -- Create a loop that brings the player to you repeatedly
        local bringingLoop = RunService.Heartbeat:Connect(function()
            character.HumanoidRootPart.CFrame = localCharacter.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3)
        end)
        
        activeTrolls.bringPlayer = bringingLoop
        return "Now bringing " .. targetPlayer.Name .. " to you!"
    else
        return "Failed to get characters!"
    end
end

trollFunctions.stopBringing = function()
    if activeTrolls.bringPlayer then
        activeTrolls.bringPlayer:Disconnect()
        activeTrolls.bringPlayer = nil
        return "Stopped bringing player"
    else
        return "Not currently bringing any player"
    end
end

trollFunctions.teleportTo = function()
    if not targetPlayer then
        return "Select a player first!"
    end
    
    local character = getPlayerCharacter(targetPlayer)
    local localCharacter = getPlayerCharacter(LocalPlayer)
    
    if character and localCharacter then
        localCharacter.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3)
        return "Teleported to " .. targetPlayer.Name
    else
        return "Failed to get characters!"
    end
end

trollFunctions.killAura = function()
    if activeTrolls.killAura then
        activeTrolls.killAura:Disconnect()
        activeTrolls.killAura = nil
        return "Kill aura disabled"
    end
    
    local function checkForKnife()
        if LocalPlayer.Character and (LocalPlayer.Character:FindFirstChild("Knife") or LocalPlayer.Backpack:FindFirstChild("Knife")) then
            return true
        end
        return false
    end
    
    local function stab(player)
        local character = getPlayerCharacter(player)
        local localCharacter = getPlayerCharacter(LocalPlayer)
        
        if character and localCharacter and checkForKnife() then
            local knife = LocalPlayer.Character:FindFirstChild("Knife") or LocalPlayer.Backpack:FindFirstChild("Knife")
            if knife and knife.Parent ~= LocalPlayer.Character then
                LocalPlayer.Character.Humanoid:EquipTool(knife)
            end
            
            -- Get close to target
            local originalPosition = localCharacter.HumanoidRootPart.CFrame
            localCharacter.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -2)
            
            -- Trigger knife stab (depends on game mechanics)
            local stabEvent = knife:FindFirstChild("StabEvent") or ReplicatedStorage:FindFirstChild("StabEvent")
            if stabEvent and stabEvent:IsA("RemoteEvent") then
                stabEvent:FireServer(player)
            end
            
            -- Return to original position
            wait(0.2)
            localCharacter.HumanoidRootPart.CFrame = originalPosition
        end
    end
    
    activeTrolls.killAura = RunService.Heartbeat:Connect(function()
        if not checkForKnife() then return end
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and getPlayerCharacter(player) then
                local distance = (getPlayerCharacter(LocalPlayer).HumanoidRootPart.Position - 
                                 getPlayerCharacter(player).HumanoidRootPart.Position).Magnitude
                
                if distance < 20 then
                    stab(player)
                    wait(1) -- Small cooldown between stabs
                end
            end
        end
    end)
    
    return "Kill aura enabled - will stab nearby players when you're murderer"
end

local afkEnabled = false
trollFunctions.afkFarm = function()
    afkEnabled = not afkEnabled

    if afkEnabled then
        -- Start AFK loop
        task.spawn(function()
            while afkEnabled do
                task.wait(1)
                local target = game:GetService("Workspace"):FindFirstChild("Lobby")
                if target and target:FindFirstChild("MainLobby") and target.MainLobby:FindFirstChild("Parts") and target.MainLobby.Parts:FindFirstChild("Part") then
                    game.Players.LocalPlayer.Character:MoveTo(target.MainLobby.Parts.Part.Position)
                end
            end
        end)
        return "AFK Farm: ENABLED"
    else
        return "AFK Farm: DISABLED"
    end
end

trollFunctions.tpToMap = function()
    local function getCurrentMap()
        for _, obj in pairs(workspace:GetChildren()) do
            if obj:IsA("Model") and obj:FindFirstChild("Spawns") then
                return obj
            end
        end
        return nil
    end

-- List of all MM2 map names you want to support
local mapNames = {
    "MilBase", "House2", "Office3", "Bank2", "Biolab", "Factory", "Hospital3",
    "ResearchFacility", "PoliceStation", "Theatre", "Hotel2", "Workshop", "Logcabin"
}

-- Function to find which map is currently loaded
local function getCurrentMap()
    for _, name in ipairs(mapNames) do
        local map = workspace:FindFirstChild(name)
        if map and map:IsA("Model") then
            return map
        end
    end
    return nil
end

trollFunctions.tpToMap = function()
    local map = getCurrentMap()
    local char = game.Players.LocalPlayer.Character

    if map and char and char:FindFirstChild("HumanoidRootPart") then
        local mapCenterCFrame = map:GetBoundingBox()
        char:SetPrimaryPartCFrame(CFrame.new(mapCenterCFrame.Position + Vector3.new(0, 5, 0)))
        return "Teleported to: " .. map.Name
    else
        return "Failed: No map found or character missing"
    end
end

trollFunctions.tpToLobby = function()
    local char = game.Players.LocalPlayer.Character
    local spawn = game:GetService("Workspace"):FindFirstChild("Lobby") and game.Workspace.Lobby:FindFirstChild("Spawns") and game.Workspace.Lobby.Spawns:FindFirstChild("Spawn")

    if char and char:FindFirstChild("HumanoidRootPart") and spawn then
        char:MoveTo(spawn.Position)
        return "Teleported to Lobby Spawn"
    else
        return "Spawn or character not found"
    end
end

trollFunctions.flingPlayer = function()
    if not targetPlayer then
        return "Select a player first!"
    end
    
    local character = getPlayerCharacter(targetPlayer)
    local localCharacter = getPlayerCharacter(LocalPlayer)
    
    if character and localCharacter then
        -- Store original settings
        local oldVelocity = localCharacter.HumanoidRootPart.Velocity
        local oldPosition = localCharacter.HumanoidRootPart.CFrame
        
        -- Apply extreme velocity to fling the player
        localCharacter.HumanoidRootPart.Velocity = Vector3.new(0, 5000, 0)
        localCharacter.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame
        
        -- Wait briefly for physics to apply
        wait(0.2)
        
        -- Restore original settings
        localCharacter.HumanoidRootPart.Velocity = oldVelocity
        localCharacter.HumanoidRootPart.CFrame = oldPosition
        
        return "Flung " .. targetPlayer.Name
    else
        return "Failed to get characters!"
    end
end

trollFunctions.trapPlayer = function()
    if not targetPlayer then
        return "Select a player first!"
    end
    
    local character = getPlayerCharacter(targetPlayer)
    if not character then
        return "Failed to get character!"
    end
    
    if activeTrolls.trapPlayer then
        -- Remove existing trap
        for _, part in pairs(activeTrolls.trapParts or {}) do
            if part and part.Parent then
                part:Destroy()
            end
        end
        activeTrolls.trapPlayer = nil
        activeTrolls.trapParts = nil
        return "Removed trap from player"
    end
    
    -- Create invisible trap around player
    local trapParts = {}
    local size = 5
    local transparency = 0.5
    
    for i = 1, 6 do
        local part = Instance.new("Part")
        part.Anchored = true
        part.CanCollide = true
        part.Transparency = transparency
        part.BrickColor = BrickColor.new("Really red")
        part.Material = Enum.Material.ForceField
        
        if i == 1 then -- Bottom
            part.Size = Vector3.new(size, 1, size)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, -3, 0)
        elseif i == 2 then -- Top
            part.Size = Vector3.new(size, 1, size)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
        elseif i == 3 then -- Front
            part.Size = Vector3.new(size, size, 1)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -size/2)
        elseif i == 4 then -- Back
            part.Size = Vector3.new(size, size, 1)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, size/2)
        elseif i == 5 then -- Left
            part.Size = Vector3.new(1, size, size)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(-size/2, 0, 0)
        else -- Right
            part.Size = Vector3.new(1, size, size)
            part.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(size/2, 0, 0)
        end
        
        part.Parent = workspace
        table.insert(trapParts, part)
    end
    
    activeTrolls.trapPlayer = true
    activeTrolls.trapParts = trapParts
    
    return "Trapped " .. targetPlayer.Name
end

trollFunctions.annoyPlayer = function()
    if not targetPlayer then
        return "Select a player first!"
    end
    
    if activeTrolls.annoyPlayer then
        activeTrolls.annoyPlayer:Disconnect()
        activeTrolls.annoyPlayer = nil
        return "Stopped annoying player"
    end
    
    local character = getPlayerCharacter(targetPlayer)
    local localCharacter = getPlayerCharacter(LocalPlayer)
    
    if character and localCharacter then
        local positions = {
            CFrame.new(0, 0, -3),  -- Front
            CFrame.new(0, 0, 3),   -- Back
            CFrame.new(-3, 0, 0),  -- Left
            CFrame.new(3, 0, 0),   -- Right
            CFrame.new(0, 3, 0),   -- Above
        }
        
        local posIndex = 1
        
        activeTrolls.annoyPlayer = RunService.Heartbeat:Connect(function()
            if getPlayerCharacter(targetPlayer) and getPlayerCharacter(LocalPlayer) then
                -- Teleport around the target player
                localCharacter.HumanoidRootPart.CFrame = 
                    character.HumanoidRootPart.CFrame * positions[posIndex]
                
                -- Cycle through positions
                posIndex = posIndex + 1
                if posIndex > #positions then
                    posIndex = 1
                end
                
                -- Small delay to make it less intensive
                wait(0.1)
            else
                activeTrolls.annoyPlayer:Disconnect()
                activeTrolls.annoyPlayer = nil
            end
        end)
        
        return "Now annoying " .. targetPlayer.Name
    else
        return "Failed to get characters!"
    end
end

trollFunctions.stealRole = function()
    if activeTrolls.stealRole then
        activeTrolls.stealRole:Disconnect()
        activeTrolls.stealRole = nil
        return "Stopped trying to steal roles"
    end

    local function checkAndStealRole()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and getPlayerCharacter(player) then
                -- Check for murderer
                if player.Character:FindFirstChild("Knife") or player.Backpack:FindFirstChild("Knife") then
                    -- Attempt to steal the knife (implementation would depend on game mechanics)
                    local knife = player.Character:FindFirstChild("Knife") or player.Backpack:FindFirstChild("Knife")
                    if knife then
                        -- This is simplified and would need actual game-specific implementation
                        local localCharacter = getPlayerCharacter(LocalPlayer)
                        if localCharacter then
                            localCharacter.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
                            -- Hypothetical way to transfer the tool
                            knife.Parent = LocalPlayer.Backpack
                            return "Stole murderer role from " .. player.Name
                        end
                    end
                end
                
                -- Check for sheriff
                if player.Character:FindFirstChild("Gun") or player.Backpack:FindFirstChild("Gun") then
                    -- Attempt to steal the gun (implementation would depend on game mechanics)
                    local gun = player.Character:FindFirstChild("Gun") or player.Backpack:FindFirstChild("Gun")
                    if gun then
                        -- This is simplified and would need actual game-specific implementation
                        local localCharacter = getPlayerCharacter(LocalPlayer)
                        if localCharacter then
                            localCharacter.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
                            -- Hypothetical way to transfer the tool
                            gun.Parent = LocalPlayer.Backpack
                            return "Stole sheriff role from " .. player.Name
                        end
                    end
                end
            end
        end
        return nil
    end
    
    activeTrolls.stealRole = RunService.Heartbeat:Connect(function()
        local result = checkAndStealRole()
        if result then
            -- Show result in notification
            local notification = Instance.new("TextLabel")
            notification.Name = "Notification"
            notification.Size = UDim2.new(1, 0, 0, 30)
            notification.Position = UDim2.new(0, 0, 0.85, 0)
            notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            notification.BorderSizePixel = 0
            notification.Text = result
            notification.TextColor3 = Color3.fromRGB(0, 255, 0)
            notification.TextSize = 14
            notification.Font = Enum.Font.Gotham
            notification.Parent = MainFrame
            
            -- Remove notification after a few seconds
            wait(3)
            notification:Destroy()
        end
        wait(1)
    end)
    
    return "Now attempting to steal roles"
end

-- Create UI buttons
local function createButton(name, position, callback)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = UDim2.new(0.9, 0, 0, 35)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.BorderSizePixel = 0
    button.Text = name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.GothamSemibold
    button.Parent = MainFrame
    
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    end)
    
    button.MouseButton1Click:Connect(function()
        local result = callback()
        
        -- Show result in notification
        local notification = Instance.new("TextLabel")
        notification.Name = "Notification"
        notification.Size = UDim2.new(1, 0, 0, 30)
        notification.Position = UDim2.new(0, 0, 0.85, 0)
        notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        notification.BorderSizePixel = 0
        notification.Text = result or "Action completed!"
        notification.TextColor3 = Color3.fromRGB(0, 255, 0)
        notification.TextSize = 14
        notification.Font = Enum.Font.Gotham
        notification.Parent = MainFrame
        
        -- Remove notification after a few seconds
        delay(3, function()
            notification:Destroy()
        end)
    end)
    
    return button
end

-- Create buttons for troll functions
local buttonY = 0.25
local buttonSpacing = 0.075
local buttons = {
    {name = "Bring Player", func = trollFunctions.bringPlayer},
    {name = "Stop Bringing", func = trollFunctions.stopBringing},
    {name = "Teleport To", func = trollFunctions.teleportTo},
    {name = "Kill Aura", func = trollFunctions.killAura},
    {name = "AFK Farm", func = trollFunctions.afkFarm},
    {name = "Map (Teleport to Current)", func = trollFunctions.tpToMap},
    {name = "Lobby (Teleport to Spawn)", func = trollFunctions.tpToLobby},
    {name = "Fling Player", func = trollFunctions.flingPlayer},
    {name = "Trap Player", func = trollFunctions.trapPlayer},
    {name = "Annoy Player", func = trollFunctions.annoyPlayer},
    {name = "Steal Role", func = trollFunctions.stealRole}
}

for i, button in ipairs(buttons) do
    createButton(button.name, UDim2.new(0.05, 0, buttonY, 0), button.func)
    buttonY = buttonY + buttonSpacing
end

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0.1, 0, 0, 40)
closeButton.Position = UDim2.new(0.9, 0, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.BorderSizePixel = 0
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = MainFrame

closeButton.MouseButton1Click:Connect(function()
    -- Stop all active trolls
    for _, connection in pairs(activeTrolls) do
        if typeof(connection) == "RBXScriptConnection" then
            connection:Disconnect()
        end
    end
    
    -- Remove trap parts if they exist
    if activeTrolls.trapParts then
        for _, part in pairs(activeTrolls.trapParts) do
            if part and part.Parent then
                part:Destroy()
            end
        end
    end
    
    Ball3rMM2:Destroy()
end)

-- Notify that script is loaded
local notification = Instance.new("TextLabel")
notification.Name = "Notification"
notification.Size = UDim2.new(1, 0, 0, 30)
notification.Position = UDim2.new(0, 0, 1, -30)
notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
notification.BorderSizePixel = 0
notification.Text = "LETS GET BALLING"
notification.TextColor3 = Color3.fromRGB(0, 255, 0)
notification.TextSize = 14
notification.Font = Enum.Font.Gotham
notification.Parent = MainFrame

-- Auto-update player list when players join/leave
Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)

print("LETS GET BALLING")
